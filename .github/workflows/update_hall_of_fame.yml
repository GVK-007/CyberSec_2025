# This is a special, one-time-use workflow to rebuild the Hall of Fame.
# It scans all previously merged Pull Requests to count every contribution,
# even those that were merged without a label.

name: 'Manual Hall of Fame Rebuilder'

on:
  workflow_dispatch:

jobs:
  rebuild-leaderboard:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Scan PRs and Rebuild
        # Explicitly use the bash shell for compatibility
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Exit immediately if a command exits with a non-zero status.
          set -e

          echo "Step 1: Initializing variables..."
          # Use a 'here document' for the multiline header for safety
          read -r -d '' header <<'EOF'
          # 🏆 Hall of Fame 🏆

          This leaderboard recognizes the amazing contributors to the Cybersecurity event. Every merged pull request from any level earns a spot here. Thank you for your hard work and valuable contributions!

          This board is updated automatically by a GitHub Action.

          | Contributor | Merged Contributions |
          | :--- | :--- |
          EOF

          # Initialize an associative array to store contributor counts
          declare -A counts

          echo "Step 2: Fetching merged pull requests from GitHub API..."
          prs=$(gh pr list --state merged --limit 1000 --json author,title)

          echo "Step 3: Processing PRs and counting contributions..."
          # The 'i' flag in test() makes the match case-insensitive.
          echo "$prs" | jq -c '.[] | select(.title | test("Level [1-4]"; "i"))' | \
          while read -r pr; do
            author=$(echo "$pr" | jq -r '.author.login')
            ((counts[$author]++))
          done

          echo "Step 4: Writing new Hall of Fame file..."
          echo -e "$header" > HALL_OF_FAME.md

          if [ ${#counts[@]} -eq 0 ]; then
            echo "⚠️ No valid merged PRs found with titles containing 'Level [1-4]'."
          else
            for author in "${!counts[@]}"; do
              echo "| @${author} | ${counts[$author]} |" >> HALL_OF_FAME.md
            done
          fi

          echo "✅ Hall of Fame file has been rebuilt locally."
          echo "--- New Hall of Fame Content ---"
          cat HALL_OF_FAME.md
          echo "---------------------------------"

      - name: Commit Updated Hall of Fame
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add HALL_OF_FAME.md
          
          if git diff --staged --quiet; then
            echo "No changes were needed for the Hall of Fame. The file is already up to date."
          else
            git commit -m "Automated: Rebuilt Hall of Fame from PR history"
            git push
            echo "Successfully committed the updated Hall of Fame."
          fi
